diff --git a/.gitignore b/.gitignore
index 3e2c9de..5bb8d71 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,3 +14,7 @@ kernel
 kernelmemfs
 mkfs
 .gdbinit
+
+.directory
+
+.vscode/
diff --git a/Makefile b/Makefile
index 09d790c..df938c7 100644
--- a/Makefile
+++ b/Makefile
@@ -52,6 +52,7 @@ endif
 
 # If the makefile can't find QEMU, specify its path here
 # QEMU = qemu-system-i386
+QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +182,11 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_fetch\
+	_shutdown\
+	_add\
+	_incr\
+	_substr\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +256,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c fetch.c shutdown.c add.c incr.c substr.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/add.c b/add.c
new file mode 100644
index 0000000..72ffdcd
--- /dev/null
+++ b/add.c
@@ -0,0 +1,33 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+void printUsage() {
+  printf(1, "Usage:\n");
+  printf(1, "add <num1> <num2> [<num3>...]\n");
+  printf(1, "returns the sum of arguments\n");
+}
+
+int main(int argc, char * argv[]) {
+  if (argc < 3) {
+    printf(1, "Need at least 2 arguments\n");
+    printUsage();
+    exit();
+  } 
+
+  struct intArrStruct *argStruct = malloc (sizeof(struct intArrStruct));
+  argStruct->size = argc - 1;
+  argStruct->nums = malloc(argStruct->size * sizeof(int));
+
+  int i;
+  for(i = 0; i < argStruct->size; i++){
+    argStruct->nums[i] = atoi(argv[i+1]);
+  }
+
+  printf(1, "%d\n", add(argStruct));
+
+  free(argStruct->nums);
+  free(argStruct);
+  exit();
+}
\ No newline at end of file
diff --git a/fetch.c b/fetch.c
new file mode 100644
index 0000000..b0fe7a7
--- /dev/null
+++ b/fetch.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main() {
+  printf(1, "xv6: Fetching process size!\n");
+  printf(1, "Using %d bytes\n", getsize());
+  exit();
+}
\ No newline at end of file
diff --git a/incr.c b/incr.c
new file mode 100644
index 0000000..3fc7e13
--- /dev/null
+++ b/incr.c
@@ -0,0 +1,20 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "fcntl.h"
+
+void printUsage() {
+  printf(1, "Usage:\n");
+  printf(1, "incr <num>\n");
+  printf(1, "adds 1 the the given argument\n");
+}
+
+int main(int argc, char * argv[]) {
+  if (argc != 2) {
+    printf(1, "Invalid number of arguments\n");
+    printUsage();
+  } else {
+    printf(1, "%d\n", incr(atoi(argv[1])));
+  }
+  exit();
+}
\ No newline at end of file
diff --git a/sh.c b/sh.c
index 054bab9..04458e4 100644
--- a/sh.c
+++ b/sh.c
@@ -10,6 +10,8 @@
 #define PIPE  3
 #define LIST  4
 #define BACK  5
+#define ANSI_COLOR_GREEN "\x1b[32m"
+#define ANSI_COLOR_RESET "\x1b[0m"
 
 #define MAXARGS 10
 
@@ -133,7 +135,7 @@ runcmd(struct cmd *cmd)
 int
 getcmd(char *buf, int nbuf)
 {
-  printf(2, "$ ");
+  printf(2, ANSI_COLOR_GREEN "tmdfxv6$ " ANSI_COLOR_RESET);
   memset(buf, 0, nbuf);
   gets(buf, nbuf);
   if(buf[0] == 0) // EOF
diff --git a/shutdown.c b/shutdown.c
new file mode 100644
index 0000000..f075f05
--- /dev/null
+++ b/shutdown.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main() {
+  printf(1, "QEMU: Terminated\n");
+  shutdown();
+  exit();
+}
\ No newline at end of file
diff --git a/stat.h b/stat.h
index 8a80933..fdaeb4f 100644
--- a/stat.h
+++ b/stat.h
@@ -9,3 +9,8 @@ struct stat {
   short nlink; // Number of links to file
   uint size;   // Size of file in bytes
 };
+
+struct intArrStruct {
+  uint size;
+  int *nums;
+};
diff --git a/substr.c b/substr.c
new file mode 100644
index 0000000..55fdcca
--- /dev/null
+++ b/substr.c
@@ -0,0 +1,14 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char * argv[]) {
+  int start, len;
+  char *str = (char *) argv[1];
+  start = atoi(argv[2]);
+  len = atoi(argv[3]);
+
+  printf(1, "%s\n", substr(str, start, len));
+
+  exit();
+}
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..398b3fa 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,11 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getsize(void);
+extern int sys_shutdown(void);
+extern int sys_incr(void);
+extern int sys_add(void);
+extern int sys_substr(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,11 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getsize]   sys_getsize,
+[SYS_shutdown]   sys_shutdown,
+[SYS_incr]   sys_incr,
+[SYS_add]   sys_add,
+[SYS_substr]   sys_substr,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..34df1c0 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getsize  22
+#define SYS_shutdown  23
+#define SYS_incr  24
+#define SYS_add  25
+#define SYS_substr  25
diff --git a/sysproc.c b/sysproc.c
index 0686d29..3f6289a 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "stat.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint
+sys_getsize(void)
+{
+  return myproc()->sz;
+}
+
+void 
+sys_shutdown(void) 
+{
+  outw(0xB004, 0x0|0x2000);
+  outw(0x604, 0x0|0x2000);
+}
+
+int 
+sys_incr(void) {
+  int arg1;
+  argint(0, &arg1);
+  return arg1 + 1;
+}
+
+int 
+sys_add(void) {
+  struct intArrStruct *inp;
+  argptr(0 , (void*) &inp ,sizeof(*inp));
+
+  int i, sum;
+  for (i = 0, sum = 0; i < inp->size; i++) {
+    sum += inp->nums[i];
+  }
+
+  return sum;
+}
+
+char *
+sys_substr(void) {
+  int start, len;
+  char *str;
+  argstr(0, &str);
+  argint(1, &start);
+  argint(2, &len);
+
+  int i, j;
+  for (i = start, j = 0; j < len;) {
+    str[j++] = str[i++];
+  }
+  str[j] = '\0';
+
+  return str;
+}
diff --git a/ulib.c b/ulib.c
index 8e1e1a2..c9e30a8 100644
--- a/ulib.c
+++ b/ulib.c
@@ -84,12 +84,17 @@ stat(const char *n, struct stat *st)
 int
 atoi(const char *s)
 {
-  int n;
+  int n, sign;
+  sign = 1;
+  if (*s == '-') {
+    sign = -1;
+    s++;
+  }
 
   n = 0;
   while('0' <= *s && *s <= '9')
     n = n*10 + *s++ - '0';
-  return n;
+  return n * sign;
 }
 
 void*
diff --git a/user.h b/user.h
index 4f99c52..177680b 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct intArrStruct;
 
 // system calls
 int fork(void);
@@ -23,6 +24,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+uint getsize(void);
+void shutdown(void);
+int incr(int);
+int add(struct intArrStruct*);
+char* substr(char*, int, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..bed7cc5 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getsize)
+SYSCALL(shutdown)
+SYSCALL(incr)
+SYSCALL(add)
+SYSCALL(substr)
