diff --git a/fetch.c b/fetch.c
index 64869b6..c9a1886 100644
--- a/fetch.c
+++ b/fetch.c
@@ -1,28 +1,130 @@
 #include "types.h"
-#include "stat.h"
 #include "user.h"
 #include "pstat.h"
 
-void psPrint() {
-  printf(1, "PS === at uptime = %d\n", uptime());
-  struct pstat ps;
-  getpinfo(&ps);
+#undef USE_YIELD
+#define MAX_CHILDREN 32
+#define LARGE_TICKET_COUNT 100000
+#define MAX_YIELDS_FOR_SETUP 100
 
-  int i;
-  for (i = 0; i < NPROC; i++) {
-    if (ps.inuse[i])
-      printf(1, "%d: tickets=%d ticks=%d\n", ps.pid[i], ps.tickets[i], ps.ticks[i]);
-  }
+__attribute__((noreturn))
+void yield_forever() {
+    while (1) {
+        yield();
+    }
 }
 
-int main(void) {
-  printf(1, "Fetching!\n");
+__attribute__((noreturn))
+void run_forever() {
+    while (1) {
+        __asm__("");
+    }
+}
+
+int spawn(int tickets) {
+    int pid = fork();
+    if (pid == 0) {
+        settickets(tickets);
+        yield();
+#ifdef USE_YIELD
+        yield_forever();
+#else
+        run_forever();
+#endif
+    } else if (pid != -1) {
+        return pid;
+    } else {
+        printf(2, "error in fork\n");
+        return -1;
+    }
+}
 
-  settickets(20);
+int find_index_of_pid(int *list, int list_size, int pid) {
+    for (int i = 0; i < list_size; ++i) {
+        if (list[i] == pid)
+            return i;
+    }
+    return -1;
+}
+
+void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+    for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+        yield();
+        int done = 1;
+        struct pstat info;
+        getpinfo(&info);
+        for (int i = 0; i < num_children; ++i) {
+            int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+            if (info.tickets[index] != tickets[i]) done = 0;
+        }
+        if (done)
+            break;
+    }
+}
 
-  if (fork() == 0) exit();
-  
-  psPrint();
-  while (wait() != -1);
-  exit();
+int main(int argc, char *argv[])
+{
+    if (argc < 3) {
+        printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+                  "       seconds is the number of time units to run for\n"
+                  "       ticketsX is the number of tickets to give to subprocess N\n",
+                  argv[0]);
+        exit();
+    }
+    int tickets_for[MAX_CHILDREN];
+    int active_pids[MAX_CHILDREN];
+    int num_seconds = atoi(argv[1]);
+    int num_children = argc - 2;
+    if (num_children > MAX_CHILDREN) {
+        printf(2, "only up to %d supported\n", MAX_CHILDREN);
+        exit();
+    }
+    /* give us a lot of ticket so we don't get starved */
+    settickets(LARGE_TICKET_COUNT);
+    for (int i = 0; i < num_children; ++i) {
+        int tickets = atoi(argv[i + 2]);
+        tickets_for[i] = tickets;
+        active_pids[i] = spawn(tickets);
+    }
+    wait_for_ticket_counts(num_children, active_pids, tickets_for);
+    struct pstat before, after;
+    before.num_processes = after.num_processes = -1;
+    getpinfo(&before);
+    sleep(num_seconds);
+    getpinfo(&after);
+    for (int i = 0; i < num_children; ++i) {
+        kill(active_pids[i]);
+    }
+    for (int i = 0; i < num_children; ++i) {
+        wait();
+    }
+    if (before.num_processes >= NPROC || after.num_processes >= NPROC) {
+        printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+        return 1;
+    }
+    if (before.num_processes < 0 || after.num_processes < 0) {
+        printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+        return 1;
+    }
+    printf(1, "TICKETS\tTICKS\n");
+    for (int i = 0; i < num_children; ++i) {
+        int before_index = find_index_of_pid(before.pid, before.num_processes, active_pids[i]);
+        int after_index = find_index_of_pid(after.pid, after.num_processes, active_pids[i]);
+        if (before_index == -1)
+            printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+        if (after_index == -1)
+            printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+        if (before_index == -1 || after_index == -1) {
+            printf(1, "%d\t--unknown--\n", tickets_for[i]);
+        } else {
+            if (before.tickets[before_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+            }
+            if (after.tickets[after_index] != tickets_for[i]) {
+                printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+            }
+            printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+        }
+    }
+    exit();
 }
\ No newline at end of file
diff --git a/proc.c b/proc.c
index e2cab2f..9c9da47 100644
--- a/proc.c
+++ b/proc.c
@@ -35,11 +35,14 @@ getpinfo(struct pstat *ps)
   int i;
   struct proc *p;
   acquire(&ptable.lock);
+  ps->num_processes = 0;
   for(i = 0, p = ptable.proc; p < &ptable.proc[NPROC]; p++, i++) {
     ps->inuse[i] = p->state != UNUSED;
     ps->tickets[i] = p->tickets;
     ps->pid[i] = p->pid;
     ps->ticks[i] = p->ticks;
+    if (p->state != UNUSED)
+      ps->num_processes += 1;
   }
   release(&ptable.lock);
 }
@@ -409,6 +412,7 @@ scheduler(void)
     // Taking ending time
     acquire(&tickslock);
     p->ticks += ticks - xticks;
+    // p->ticks += 1;
     release(&tickslock);
 
     switchkvm();
diff --git a/pstat.h b/pstat.h
index 2e74b72..8e32f3b 100644
--- a/pstat.h
+++ b/pstat.h
@@ -4,6 +4,7 @@
 #include "param.h"
 
 struct pstat {
+  int num_processes;
   int inuse[NPROC]; 
   int tickets[NPROC]; 
   int pid[NPROC];
diff --git a/syscall.c b/syscall.c
index d5afd9a..371e113 100644
--- a/syscall.c
+++ b/syscall.c
@@ -105,6 +105,7 @@ extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_settickets(void);
 extern int sys_getpinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -130,6 +131,7 @@ static int (*syscalls[])(void) = {
 [SYS_close]   sys_close,
 [SYS_settickets]   sys_settickets,
 [SYS_getpinfo]   sys_getpinfo,
+[SYS_yield]   sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index edc162b..4aa2768 100644
--- a/syscall.h
+++ b/syscall.h
@@ -22,3 +22,4 @@
 #define SYS_close  21
 #define SYS_settickets  22
 #define SYS_getpinfo  23
+#define SYS_yield  24
diff --git a/sysproc.c b/sysproc.c
index 0f88ebc..f8348c5 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -14,6 +14,12 @@ sys_fork(void)
   return fork();
 }
 
+void
+sys_yield(void)
+{
+  yield();
+}
+
 int
 sys_exit(void)
 {
diff --git a/user.h b/user.h
index 9b5341c..74e007e 100644
--- a/user.h
+++ b/user.h
@@ -26,6 +26,7 @@ int sleep(int);
 int uptime(void);
 int settickets(int);
 int getpinfo(struct pstat*);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index bce13c0..cf07e01 100644
--- a/usys.S
+++ b/usys.S
@@ -31,3 +31,4 @@ SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(settickets)
 SYSCALL(getpinfo)
+SYSCALL(yield)
